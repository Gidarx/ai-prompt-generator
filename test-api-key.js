// Script para testar se a API key do Gemini est√° funcionando
const { GoogleGenerativeAI } = require('@google/generative-ai');
const fs = require('fs');

// Fun√ß√£o para carregar vari√°veis do .env.local
function loadEnvFile() {
  try {
    const envContent = fs.readFileSync('.env.local', 'utf8');
    const lines = envContent.split('\n');
    
    for (const line of lines) {
      const trimmed = line.trim();
      if (trimmed && !trimmed.startsWith('#')) {
        const [key, ...valueParts] = trimmed.split('=');
        if (key && valueParts.length > 0) {
          process.env[key.trim()] = valueParts.join('=').trim();
        }
      }
    }
  } catch (error) {
    console.log('‚ö†Ô∏è  Arquivo .env.local n√£o encontrado');
  }
}

async function testApiKey() {
  try {
    console.log('üîë Testando API key do Gemini...\n');
    
    loadEnvFile();
    const apiKey = process.env.GEMINI_API_KEY || process.env.GOOGLE_API_KEY;
    
    if (!apiKey) {
      console.error('‚ùå API key n√£o encontrada!');
      return;
    }

    console.log('‚úÖ API key encontrada:', apiKey.substring(0, 10) + '...');
    
    const genAI = new GoogleGenerativeAI(apiKey);
    
    // Testar com modelo mais b√°sico primeiro
    console.log('üß™ Testando modelo gemini-1.5-flash...');
    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
    
    const result = await model.generateContent('Diga apenas "Ol√°, API funcionando!"');
    const response = await result.response;
    
    console.log('‚úÖ Teste bem-sucedido!');
    console.log('üìù Resposta:', response.text());
    
    // Testar listagem de modelos
    console.log('\nüîç Testando listagem de modelos...');
    const models = await genAI.listModels();
    console.log(`üìä ${models.length} modelos encontrados`);
    
    // Mostrar alguns modelos dispon√≠veis
    const availableModels = models
      .filter(m => m.supportedGenerationMethods?.includes('generateContent'))
      .slice(0, 5)
      .map(m => m.name);
    
    console.log('üéØ Primeiros 5 modelos dispon√≠veis:');
    availableModels.forEach(name => console.log(`  - ${name}`));
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
    
    if (error.message.includes('403')) {
      console.log('\nüí° Poss√≠veis solu√ß√µes:');
      console.log('1. Verificar se a API key est√° correta');
      console.log('2. Gerar nova API key em: https://makersuite.google.com/app/apikey');
      console.log('3. Verificar se a API do Gemini est√° habilitada');
    }
  }
}

testApiKey();